#!/usr/bin/env nodejs

var cp = require('child_process');
var fs = require('fs');
var path = require('path');
var util = require('util');
var url = require('url');
//var http = require('http');
var threaded_http = require('./threaded_http.js');

if (process.getuid() != 0) {
    console.log("[ERROR] Please run this program as 'root'!");
    process.exit(1);
}

if (process.argv.length == 2) {
    process.exit(0);
}

var argv = process.argv;
var cmd = {
    cmd: null,
    args: [],
    options: []
};
var isArgsToken = false;
for (var i = 2; i < argv.length; ++ i) {
    if (argv[i] === 'dist-upgrade') {
        cmd.cmd = 'dist-upgrade';
    }
    else if (argv[i] === 'install') {
        cmd.cmd = 'install';
        isArgsToken = true;
    }
    else if (argv[i][0] === '-') {
        cmd.options.push(argv[i]);
        isArgsToken = false; 
    }
    else {
        if (isArgsToken) { 
           cmd.args.push(argv[i]);
        }
        else {
            console.log("[ERROR] wrong command arguments");
            process.exit(1);
        }
    }
}
//if (cmd.cmd == 'install' && cmd.args.length == 0) {
//    console.log("[ERROR] wrong 'install' command arguments");
//    process.exit(1);
//}
console.log("[DEBUG] " + JSON.stringify(cmd));
//process.exit(0);
    

var dl = {
    destDir: '/var/cache/apt/archives',
    size: 0,
    sizeGot: 0,
    sizeThread: 100000,
    nThreads: 0,
    nThreadsMax: 64,
    pkgs: [],
    nPkgs: 0,
    iPkgNext: 0
};

aptgetPrinturis(cmd);

function aptgetPrinturis (cmd) {
    var pkgs = []; 

    var aptargs = [];
    if (cmd.cmd === 'install') {
        aptargs = ['install'];
        aptargs = aptargs.concat(cmd.args).concat(cmd.options);
    }
    else if (cmd.cmd === 'dist-upgrade') {
        aptargs = ['dist-upgrade'];
    }
    else {
        invokeAptget();
        process.exit(0);
    }
    aptargs.push('-qq', '--print-uris', '-f');
    //console.log("[DEBUG] 'apt-get %s'", aptargs.join(' '));

    var procAptgetPrinturis = cp.spawn('apt-get', aptargs, {stdio: [process.stdin, 'pipe', process.stderr]});
    var stdout = '';

    procAptgetPrinturis.stdout.on('data', function (data) {
        stdout += data.toString();
    });

    procAptgetPrinturis.on('exit', function (code, signal) {
        if (!signal) {
            if (code) {
                console.log('[ERROR] exit: ' + code);
                return code;
            }
            else {
                stdout.split('\n').forEach(function (e) {
                    if (!e) return;
                    var token = e.split(' '); 
                    //console.log("[DEBUG] token=" + token);
                    pkgs.push({
                        uri:  token[0].slice(1, -1),
                        file: token[1],
                        size: parseInt(token[2]),
                        md5:  token[3].split(':')[1]
                    }); 
                    dl.size += parseInt(token[2]);
                });
                dl.nPkgs = pkgs.length;
                dl.pkgs = pkgs;
                //console.log("[DEBUG] " + pkgs.length);
                if (dl.nPkgs) {
                    removeOldFiles(dl);
                    download(dl);
                }
                else {
                    invokeAptget();
                }
            }
        }
    });
}

function removeOldFiles (dl) {
    console.log("[INFO] Removing the follwing package files:");
    dl.pkgs.forEach(function (e) {
        var filePath = dl.destDir + e.file; 
        if (fs.existsSync(filePath)) {
            fs.unlink(filePath, function (err) {
                if (err) console.log("[ERROR] " + err);
            });
            console.log("[INFO]     " + e.file);
        }
    });
}


function download (dl) {
    //console.log("[INFO] Completed download: %dBytes (%d\%)", dl.sizeGot, parseInt(dl.sizeGot * 100 / dl.size));
    // invoke as many download threads as 'nThreadMax'
    for (; dl.nThreads < dl.nThreadsMax && dl.iPkgNext < dl.nPkgs; ++ dl.iPkgNext) {
        downloadOnePkg(dl, dl.iPkgNext, false);
    }
    console.log("[DEBUG] 'dl.nThreads = %d, dl.iPkgNext = %d, dl.nPkgs = %d", dl.nThreads, dl.iPkgNext, dl.nPkgs);

    if (dl.iPkgNext === dl.nPkgs && dl.nThreads === 0) {
        console.log("[INFO] All downloaded packages are verified successfully! Now install it!");
        invokeAptget();
    }
    else { 
        // wait 5000ms
        setTimeout(download, 5000, dl);
    }
}
 

function downloadOnePkg (dl, i, isRedownload) {
    var pkg = dl.pkgs[i];
    var nThreads = parseInt(pkg.size / dl.sizeThread) + 1;
    if (nThreads + dl.nThreads > dl.nThreadsMax) {
        nThreads = dl.nThreadsMax - dl.nThreads;
    }
    dl.nThreads += nThreads;

    //downloadOnePkgByAxel(nThreads);
    downloadOnePkgByNode(nThreads);

    function downloadOnePkgByNode(nThreads) {
        threaded_http.threadedGet(
            pkg.uri, 
            path.join(dl.destDir, pkg.file), 
            nThreads, 
            pkg.md5,
            function (th) {
                th.on('thread_data', function (i, chunk) {
                    dl.sizeGot += chunk.length;
                    console.log("[INFO] Package file '%s': %d% (%dBytes), Total: %d% (%dBytes)", th.destPath, parseInt(th.sizeGot * 100 / th.size), th.size, parseInt(dl.sizeGot * 100 / dl.size), dl.size);
                }).on('thread_error', function (i, sizeFlush) {
                    dl.sizeGot -= sizeFlush;
                }).on('thread_end', function (i) {
                    console.log("[INFO] Package file '%s' download thread %d completed", th.destPath, i);
                    dl.nThreads --;
                }).on('error', function (errCode, sizeFlush) {
                    dl.sizeGot -= sizeFlush;
                    dl.nThreads += nThreads;
                }).on('end', function () {
                    console.log("[INFO] Package file '%s' download completed", th.destPath);
                });
            }
        );
    }

    // Downloand function using 'axel'
    function downloadOnePkgByAxel(nThreads) {
        var cmdLine = ['-o', pkg.file, '-n', nThreads.toString(), pkg.uri, '-a'];
        console.log("[INFO] Downloading package... 'axel %s'", cmdLine.join(' '));
        var procDownload = cp.spawn(
            'axel', 
            cmdLine, 
            {cwd: dl.destDir, stdio: 'inherit'});
        procDownload.on('exit', function (code, signal) {
            if (!signal) { // program exits normally
                if (code) { // w/ error, re-download it
                    download(dl, i, true);
                }
                else { // w/o error
                    // check the md5sum
                    var md5File = pkg.md5 + ' *' + pkg.file;
                    var procVerifyFiles = cp.spawn(
                        'md5sum', 
                        ['-c', '--status'], 
                        {cwd: dl.destDir, stdio: ['pipe', 'ignore', process.stderr]});
                    procVerifyFiles.stdin.write(md5File);
                    procVerifyFiles.stdin.end();
                    procVerifyFiles.on('exit', function (code, signal) {
                        if (!signal) { // program exits normally
                            if (code) { // w/ error, re-download it
                                console.log("[ERROR] " + "md5sum verification failed for '" + md5File + "'");
                                //remove the bad one
                                var filePath = dl.destDir + pkg.file; 
                                if (fs.existsSync(filePath)) {
                                    fs.unlink(filePath, function (err) {
                                        if (err) console.log("[ERROR] " + err);
                                    });
                                }
                                downloadOnePkg(dl, i, true);
                            }
                            else { // md5sum succeeded
                                console.log("[INFO] " + "md5sum verification succeeded for '" + pkg.file + "'");
                                dl.nThreads -= nThreads; //release thread slots
                                dl.sizeGot += pkg.size;
                                //console.log("[DEBUG] 'nThreadsTotal -= nThreads;' nThreadsTotal = %d, i = %d", nThreadsTotal ,i);
                            }
                        }
                    });
                }
            }
        });
    }
}

function invokeAptget () {
    console.log("[DEBUG] command 'apt-get " + process.argv.slice(2) + "'");
    var procAptget = cp.spawn('apt-get', process.argv.slice(2), {stdio: 'inherit'});
};

