#!/usr/bin/nodejs

var cp = require('child_process');
var fs = require('fs');

if (process.getuid() != 0) {
    console.log("[ERROR] Please run this program as 'root'!");
    process.exit(1);
}

if (process.argv.length == 2) {
    process.exit(0);
}

var argv = process.argv;
var cmd = {
    cmd: undefined,
    args: [],
    options: []
};
var isArgsToken = false;
for (var i = 2; i < argv.length; ++ i) {
    if (argv[i] === 'dist-upgrade') {
        cmd.cmd = 'dist-upgrade';
    }
    else if (argv[i] === 'install') {
        cmd.cmd = 'install';
        isArgsToken = true;
    }
    else if (argv[i][0] === '-') {
        cmd.options.push(argv[i]);
        isArgsToken = false; 
    }
    else {
        if (isArgsToken) { 
           cmd.args.push(argv[i]);
        }
        else {
            console.log("[ERROR] wrong command arguments");
            process.exit(1);
        }
    }
}
//if (cmd.cmd == 'install' && cmd.args.length == 0) {
//    console.log("[ERROR] wrong 'install' command arguments");
//    process.exit(1);
//}
console.log("[DEBUG] " + JSON.stringify(cmd));
//process.exit(0);
    

var dl = {
    sizeTotal: 0,
    sizeComplete: 0,
    nThreads: 0,
    nThreadsMax: 64,
    nPkgs: 0,
    iPkgNext: 0,
    pkgs: null
};

aptgetPrinturis(cmd);

function aptgetPrinturis (cmd) {
    var pkgs = []; 

    var aptargs = [];
    if (cmd.cmd === 'install') {
        aptargs = ['install'];
        aptargs = aptargs.concat(cmd.args).concat(cmd.options);
    }
    else if (cmd.cmd === 'dist-upgrade') {
        aptargs = ['dist-upgrade'];
    }
    else {
        invokeAptget();
        process.exit(0);
    }
    aptargs.push('-qq', '--print-uris');
    //console.log("[DEBUG] 'apt-get %s'", aptargs.join(' '));

    var procAptgetPrinturis = cp.spawn('apt-get', aptargs, {stdio: [process.stdin, 'pipe', process.stderr]});
    var stdout = '';

    procAptgetPrinturis.stdout.on('data', function (data) {
        stdout += data.toString();
    });

    procAptgetPrinturis.on('exit', function (code, signal) {
        if (!signal) {
            if (code) {
                console.log('[ERROR] exit: ' + code);
                return code;
            }
            else {
                stdout.split('\n').forEach(function (e) {
                    if (!e) return;
                    var token = e.split(' '); 
                    //console.log("[DEBUG] token=" + token);
                    pkgs.push({
                        uri:  token[0].slice(1, -1),
                        file: token[1],
                        size: parseInt(token[2]),
                        md5:  token[3].split(':')[1]
                    }); 
                    dl.sizeTotal += parseInt(token[2]);
                });
                dl.nPkgs = pkgs.length;
                dl.pkgs = pkgs;
                //console.log("[DEBUG] " + pkgs.length);
                if (dl.nPkgs) {
                    removeOldFiles(dl.pkgs);
                    download(dl);
                }
                else {
                    invokeAptget();
                }
            }
        }
    });
}

function removeOldFiles (pkgs) {
    var i;
    console.log("[INFO] Removing the follwing package files:");
    pkgs.forEach(function (e) {
        var filePath = '/var/cache/apt/archives/' + e.file; 
        if (fs.existsSync(filePath)) {
            fs.unlink(filePath, function (err) {
                if (err) console.log("[ERROR] " + err);
            });
            console.log("[INFO]     " + e.file);
        }
    });
}


function download (dl) {
    console.log("[INFO] Completed download: %dBytes (%d\%)", dl.sizeComplete, parseInt(dl.sizeComplete * 100 / dl.sizeTotal));
    // invoke as many download threads as 'nThreadMax'
    for (; dl.nThreads < dl.nThreadsMax && dl.iPkgNext < dl.nPkgs; ++ dl.iPkgNext) {
        downloadOnePkg(dl, dl.iPkgNext, false);
    }
    console.log("[DEBUG] 'dl.nThreads = %d, dl.iPkgNext = %d", dl.nThreads, dl.iPkgNext);

    // wait 500ms for some empty thread slots
    if (dl.iPkgNext < dl.nPkgs || dl.nThreads) {
        setTimeout(download, 500, dl);
    }
    else { // all downloads succeed, run the apt-get command
        console.log("[INFO] All downloaded packages are verified successfully! Now install it!");
        invokeAptget();
    }
}
 

function downloadOnePkg (dl, i, isRedownload) {
    var pkg = dl.pkgs[i];
    var nThreads = parseInt(pkg.size / 100000) + 1;
    if (nThreads > dl.nThreadsMax / 2) nThreads = parseInt(dl.nThreadsMax / 2);
    if (!isRedownload) {
        dl.nThreads += nThreads;
        //console.log("[DEBUG] 'nThreadsTotal += nThreads;' nThreadsTotal = %d, i = %d", nThreadsTotal ,i);
    }
    var cmdLine = ['-o', pkg.file, '-n', nThreads.toString(), pkg.uri, '-a'];
    console.log("[INFO] " + "Downloading package... '" + "axel " + cmdLine.join(' ') + "'");
    var procDownload = cp.spawn('axel', cmdLine, {cwd: '/var/cache/apt/archives', stdio: 'inherit'});
    //var logLine = '';
    //procDownload.stdout.on('data', function (data) {
    //    var s = data.toString();
    //    var n = s.lastIndexOf('\n');
    //    // Print what prior to a new-line
    //    if (n != -1) {
    //        logLine += s.slice(0, n);
    //        console.log(logLine);
    //        logLine = s.slice(n + 1); // '' if s[-1] === '\n'
    //    }
    //    else {
    //        logLine += s;
    //    }
    //});
    procDownload.on('exit', function (code, signal) {
        if (!signal) { // program exits normally
            if (code) { // w/ error, re-download it
                download(dl, i, true);
            }
            else { // w/o error
                // check the md5sum
                var md5File = pkg.md5 + ' *' + pkg.file;
                var procVerifyFiles = cp.spawn('md5sum', ['-c', '--status'], {cwd: '/var/cache/apt/archives', stdio: ['pipe', 'ignore', process.stderr]});
                procVerifyFiles.stdin.write(md5File);
                procVerifyFiles.stdin.end();
                procVerifyFiles.on('exit', function (code, signal) {
                    if (!signal) { // program exits normally
                        if (code) { // w/ error, re-download it
                            console.log("[ERROR] " + "md5sum verification failed for '" + md5File + "'");
                            //remove the bad one
                            var filePath = '/var/cache/apt/archives/' + pkg.file; 
                            if (fs.existSync(filePath)) {
                                fs.unlink(filePath, function (err) {
                                    if (err) console.log("[ERROR] " + err);
                                });
                            }
                            downloadOnePkg(dl, i, true);
                        }
                        else { // md5sum succeeded
                            console.log("[INFO] " + "md5sum verification succeeded for '" + pkg.file + "'");
                            dl.nThreads -= nThreads; //release thread slots
                            dl.sizeComplete += pkg.size;
                            //console.log("[DEBUG] 'nThreadsTotal -= nThreads;' nThreadsTotal = %d, i = %d", nThreadsTotal ,i);
                        }
                    }
                });
            }
        }
    });
}

function invokeAptget () {
    console.log("[DEBUG] command 'apt-get " + process.argv.slice(2) + "'");
    var procAptget = cp.spawn('apt-get', process.argv.slice(2), {stdio: 'inherit'});
};



